df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
#print(df_total) # print to monitor progress
}
df_total
# For loop ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;;; #
df_total   <- data.frame() # start dataframe
loop.table <- data.frame(matrix(nrow = 3, ncol = 4)) # create dataframe, columns for the number of sampling days
colnames(loop.table)<-c('CPM_threshold', 'Day', 'total_genes', 'mean_reads_per_gene') # names for comuns in the for loop
CPM_loop <- c(0:50) # run the loop for CPM from 1 - 10 (counts per million)
CPM_loop <- data.frame(CPM_loop)
for (i in 1:nrow(CPM_loop)) {
var <- CPM_loop[i,1]
# ==========================================================
#
# All
# ==========================================================
cts.All        <- data.frame(raw_counts_mtx[,-1], row.names=raw_counts_mtx[,1])
cts.All.matrix <- as.matrix(cts.All, row.names="transcript_id")
CPM.All        <- cpm(cts.All.matrix) # Obtain CPMs (counts oer million) using egdeR
thresh.All     <- CPM.All > var # Which values in myCPM are greater than 3?
keep.All       <- rowSums(thresh.All) >= (ncol(thresh.All)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
rowSums(head(thresh.All)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.All)) # 6880 genes with TRUE in all 36 samples
cts.matrix.All.LOOPED     <- cts.All.matrix[keep.All,]
All_total_genes           <- nrow(cts.matrix.All.LOOPED)
All_mean_reads_per_gene   <- mean( (rowSums(cts.matrix.All.LOOPED) / ncol(cts.matrix.All.LOOPED) ) )
# ==========================================================
#
# DAY 0
# ==========================================================
cts.d0        <- data.frame(raw_counts_mtx_D0[,-1], row.names=raw_counts_mtx_D0[,1])
cts.d0.matrix <- as.matrix(cts.d0, row.names="transcript_id")
CPM.d0        <- cpm(cts.d0.matrix) # Obtain CPMs (counts oer million) using egdeR
thresh.d0     <- CPM.d0 > var # Which values in myCPM are greater than 3?
keep.d0       <- rowSums(thresh.d0) >= (ncol(thresh.d0)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
rowSums(head(thresh.d0)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d0)) # 6880 genes with TRUE in all 36 samples
cts.matrix.d0.LOOPED     <- cts.d0.matrix[keep.d0,]
d0_total_genes           <- nrow(cts.matrix.d0.LOOPED)
d0_mean_reads_per_gene   <- mean( (rowSums(cts.matrix.d0.LOOPED) / ncol(cts.matrix.d0.LOOPED) ) )
# ==========================================================
#
# DAY 1
# ==========================================================
cts.d1        <- data.frame(raw_counts_mtx_D1[,-1], row.names=raw_counts_mtx_D1[,1])
cts.d1.matrix <- as.matrix(cts.d1, row.names="transcript_id")
CPM.d1        <- cpm(cts.d1.matrix) # Obtain CPMs (counts oer million) using egdeR
thresh.d1     <- CPM.d1 > var # Which values in myCPM are greater than 3?
keep.d1       <- rowSums(thresh.d1) >= (ncol(thresh.d1)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
rowSums(head(thresh.d1)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d1)) # 6880 genes with TRUE in all 36 samples
cts.matrix.d1.LOOPED     <- cts.d1.matrix[keep.d1,]
d1_total_genes           <- nrow(cts.matrix.d1.LOOPED)
d1_mean_reads_per_gene   <- mean( (rowSums(cts.matrix.d1.LOOPED) / ncol(cts.matrix.d1.LOOPED) ) )
# table
loop.table$CPM_threshold           <- c(var, var, var)
loop.table$Day                     <- c('all', 0, 1)
loop.table$total_genes             <- c(All_total_genes,
d0_total_genes,
d1_total_genes)
loop.table$mean_reads_per_gene   <- c(All_mean_reads_per_gene,
d0_mean_reads_per_gene,
d1_mean_reads_per_gene)
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
#print(df_total) # print to monitor progress
}
df_total
All_filterfig <- df_total %>%
dplyr::filter(Day %in% 'all') %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
ggtitle("Day 0") +
geom_vline(xintercept = c(3,5,10), color = 'red') +
facet_wrap(. ~ variable, scales="free")
All_filterfig
D0_filterfig <- df_total %>%
dplyr::filter(Day %in% 0) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
ggtitle("Day 0") +
geom_vline(xintercept = c(3,5,10), color = 'red') +
facet_wrap(. ~ variable, scales="free")
D1_filterfig <- df_total %>%
dplyr::filter(Day %in% 1) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot18 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
ggtitle("Day 18") +
geom_vline(xintercept = c(3,5,10), color = 'red') +
facet_wrap(. ~ variable, scales="free")
png("Output/CPM_Read_Filter_Curve.png", 2000, 1000, pointsize=20)
png("Output/CPM_Read_Filter_Curve.png", 2000, 1000, pointsize=20)
png("Output/CPM_Read_Filter_Curve.png", 2000, 1000, pointsize=20)
png("C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis/Output/CPM_Read_Filter_Curve.png", 2000, 1000, pointsize=20)
plot_grid(All_filterfig, D0_filterfig, D1_filterfig)
plot_grid(All_filterfig, D0_filterfig, D1_filterfig)
dev.off()
png("C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis/Output/CPM_Read_Filter_Curve.png", 2000, 1000, pointsize=20)
plot_grid(All_filterfig, D0_filterfig, D1_filterfig)
dev.off()
All_filterfig <- df_total %>%
dplyr::filter(Day %in% 'all') %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
ggtitle("All data") +
geom_vline(xintercept = c(3,5,10), color = 'red') +
facet_wrap(. ~ variable, scales="free")
# All_filterfig
D0_filterfig <- df_total %>%
dplyr::filter(Day %in% 0) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
ggtitle("Day 0") +
geom_vline(xintercept = c(3,5,10), color = 'red') +
facet_wrap(. ~ variable, scales="free")
# D0_filterfig
D1_filterfig <- df_total %>%
dplyr::filter(Day %in% 1) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot18 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
ggtitle("Day 1") +
geom_vline(xintercept = c(3,5,10), color = 'red') +
facet_wrap(. ~ variable, scales="free")
# D1_filterfig
png("C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis/Output/CPM_Read_Filter_Curve.png", 2000, 1000, pointsize=20)
plot_grid(All_filterfig, D0_filterfig, D1_filterfig)
dev.off()
# ==========================================================
#
# DAY 0  (5 CPM in 50% samples using edgeR)
# ==========================================================
raw.cts.d0          <- data.frame(raw.cts.d0[,-1], row.names=raw.cts.d0[,1])
# ==========================================================
#
# DAY 0  (5 CPM in 50% samples using edgeR)
# ==========================================================
raw.cts.d0          <- data.frame(raw_counts_mtx_D0[,-1], row.names=raw_counts_mtx_D0[,1])
raw.countMatrix.d0  <- as.matrix(raw.cts.d0, row.names="transcript_id")
ncol(raw.countMatrix.d0) # 24  samples from just Day 0
nrow(raw.countMatrix.d0) # 66071 total genes
# pre-filtering; genes omitted if < 5 counts per million reads in 50% of samples
# view the colSums of our Day0 samples  - notice the read sums are around 1 million
CPM.d0 <- cpm(raw.countMatrix.d0) # Obtain CPMs (counts oer million) using egdeR
head(CPM.d0) # Have a look at the output
thresh.d0 <- CPM.d0 > 5 # Which values in myCPM are greater than 5?
head(thresh.d0) # This produces a logical matrix with TRUEs and FALSES
rowSums(head(thresh.d0)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d0)) # 2452 genes with TRUE in all 24 samples; 57498 genes with false in all 24 samples
#     0     1     2     3     4     5     6     7     8     9    10    11    12
# 21991  1239   818   696   580   557   742   550   524   639   682   942  9017
keep.d0 <- rowSums(thresh.d0) >= floor(ncol(thresh.d0)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
summary(keep.d0) # only 8% of genes passed
#    Mode   FALSE    TRUE
# logical   25881   1309
countMatrix.d0.filtered <- raw.countMatrix.d0[keep.d0,] # Subset the rows of countdata to keep the more highly expressed genes
dim(countMatrix.d0.filtered) # 4820 seq  24 samples
hist_1_d0     <- qplot((colSums(countMatrix.d0.filtered)) , geom="histogram")
d0_1_numgenes <- dim(countMatrix.d0.filtered)[1]
d0_1_samp     <- dim(countMatrix.d0.filtered)[2]
d0_1_samp
hist_1_d0
countMatrix.d0.filtered
dim(countMatrix.d0.filtered)
summary(keep.d0) # only 8% of genes passed
#    Mode   FALSE    TRUE
# logical   25881   13096
countMatrix.d0.filtered <- raw.countMatrix.d0[keep.d0,] # Subset the rows (genes)
dim(countMatrix.d0.filtered)
# ==========================================================
#
# DAY 1  (5 CPM in 51% samples using edgeR)
# ==========================================================
raw.cts.d1          <- data.frame(raw_counts_mtx_D1[,-1], row.names=raw_counts_mtx_D1[,1])
raw.countMatrix.d1  <- as.matrix(raw.cts.d1, row.names="transcript_id")
ncol(raw.countMatrix.d1) # 12  samples from just Day 1
nrow(raw.countMatrix.d1) # 38977 total genes
# pre-filtering; genes omitted if < 5 counts per million reads in 51% of samples
# view the colSums of our Day1 samples  - notice the read sums are around 1 million
CPM.d1 <- cpm(raw.countMatrix.d1) # Obtain CPMs (counts oer million) using egdeR
head(CPM.d1) # Have a look at the output
thresh.d1 <- CPM.d1 > 5 # Which values in myCPM are greater than 5?
head(thresh.d1) # This produces a logical matrix with TRUEs and FALSES
rowSums(head(thresh.d1)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d1)) # 9117 genes with TRUE in 12 samples; 21991 genes with false in 12 samples
#     0     1     2     3     4     5     6     7     8     9    10    11    12
# 21991  1239   818   696   580   557   742   550   524   639   682   942  9017
keep.d1 <- rowSums(thresh.d1) >= floor(ncol(thresh.d1)/2) # we would like to keep genes that have at least 51% TRUES in each row of thresh
summary(keep.d1) # only 8% of genes passed
#    Mode   FALSE    TRUE
# logical   25881   13196
countMatrix.d1.filtered <- raw.countMatrix.d1[keep.d1,] # Subset the rows (genes)
dim(countMatrix.d1.filtered) # 13196  genes
#    Mode   FALSE    TRUE
# logical   25881   13196
countMatrix.d1.filtered <- raw.countMatrix.d1[keep.d1,] # Subset the rows (genes)
dim(countMatrix.d1.filtered) # 13096  genes
# ==========================================================
#
# DAY 0  (5 CPM in 50% samples using edgeR)
# ==========================================================
raw.cts.d0          <- data.frame(raw_counts_mtx_D0[,-1], row.names=raw_counts_mtx_D0[,1])
raw.countMatrix.d0  <- as.matrix(raw.cts.d0, row.names="transcript_id")
ncol(raw.countMatrix.d0) # 12  samples from just Day 0
nrow(raw.countMatrix.d0) # 38977 total genes
# pre-filtering; genes omitted if < 5 counts per million reads in 50% of samples
# view the colSums of our Day0 samples  - notice the read sums are around 1 million
CPM.d0 <- cpm(raw.countMatrix.d0) # Obtain CPMs (counts oer million) using egdeR
head(CPM.d0) # Have a look at the output
head(CPM.d1) # Have a look at the output
# get the IDs to truncate columns of the raw gene count matrix
Metadata_D0 <- Metadata %>%  dplyr::filter(Day == 0) # metadata for time 0
Metadata_D1 <- Metadata %>%  dplyr::filter(Day == 1) # metadata for time 1
Metadata_D0
Metadata
Metadata_D1 <- Metadata %>%  dplyr::filter(Day == 1) # metadata for time 1
# get the IDs to truncate columns of the raw gene count matrix
Metadata_D0 <- Metadata %>%  dplyr::filter(Day == 0) # metadata for time 0
Metadata_D1 <- Metadata %>%  dplyr::filter(Day == 1) # metadata for time 1
# abundance matrix
raw_counts_mtx # this is all the data
raw_counts_mtx_D0 <- raw_counts_mtx %>%
dplyr::select(c('gene_id', Metadata_D0$Sample.ID)) # select sample IDs for day 0
raw_counts_mtx_D1 <- raw_counts_mtx %>%
dplyr::select(c('gene_id', Metadata_D1$Sample.ID)) # select sample IDs for day 1
# For loop ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;;; #
df_total   <- data.frame() # start dataframe
loop.table <- data.frame(matrix(nrow = 3, ncol = 4)) # create dataframe, columns for the number of sampling days
colnames(loop.table)<-c('CPM_threshold', 'Day', 'total_genes', 'mean_reads_per_gene') # names for comuns in the for loop
CPM_loop <- c(0:50) # run the loop for CPM from 1 - 10 (counts per million)
CPM_loop <- data.frame(CPM_loop)
for (i in 1:nrow(CPM_loop)) {
var <- CPM_loop[i,1]
# ==========================================================
#
# All
# ==========================================================
cts.All        <- data.frame(raw_counts_mtx[,-1], row.names=raw_counts_mtx[,1])
cts.All.matrix <- as.matrix(cts.All, row.names="transcript_id")
CPM.All        <- cpm(cts.All.matrix) # Obtain CPMs (counts oer million) using egdeR
thresh.All     <- CPM.All > var # Which values in myCPM are greater than 3?
keep.All       <- rowSums(thresh.All) >= (ncol(thresh.All)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
rowSums(head(thresh.All)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.All)) # 6880 genes with TRUE in all 36 samples
cts.matrix.All.LOOPED     <- cts.All.matrix[keep.All,]
All_total_genes           <- nrow(cts.matrix.All.LOOPED)
All_mean_reads_per_gene   <- mean( (rowSums(cts.matrix.All.LOOPED) / ncol(cts.matrix.All.LOOPED) ) )
# ==========================================================
#
# DAY 0
# ==========================================================
cts.d0        <- data.frame(raw_counts_mtx_D0[,-1], row.names=raw_counts_mtx_D0[,1])
cts.d0.matrix <- as.matrix(cts.d0, row.names="transcript_id")
CPM.d0        <- cpm(cts.d0.matrix) # Obtain CPMs (counts oer million) using egdeR
thresh.d0     <- CPM.d0 > var # Which values in myCPM are greater than 3?
keep.d0       <- rowSums(thresh.d0) >= (ncol(thresh.d0)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
rowSums(head(thresh.d0)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d0)) # 6880 genes with TRUE in all 36 samples
cts.matrix.d0.LOOPED     <- cts.d0.matrix[keep.d0,]
d0_total_genes           <- nrow(cts.matrix.d0.LOOPED)
d0_mean_reads_per_gene   <- mean( (rowSums(cts.matrix.d0.LOOPED) / ncol(cts.matrix.d0.LOOPED) ) )
# ==========================================================
#
# DAY 1
# ==========================================================
cts.d1        <- data.frame(raw_counts_mtx_D1[,-1], row.names=raw_counts_mtx_D1[,1])
cts.d1.matrix <- as.matrix(cts.d1, row.names="transcript_id")
CPM.d1        <- cpm(cts.d1.matrix) # Obtain CPMs (counts oer million) using egdeR
thresh.d1     <- CPM.d1 > var # Which values in myCPM are greater than 3?
keep.d1       <- rowSums(thresh.d1) >= (ncol(thresh.d1)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
rowSums(head(thresh.d1)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d1)) # 6880 genes with TRUE in all 36 samples
cts.matrix.d1.LOOPED     <- cts.d1.matrix[keep.d1,]
d1_total_genes           <- nrow(cts.matrix.d1.LOOPED)
d1_mean_reads_per_gene   <- mean( (rowSums(cts.matrix.d1.LOOPED) / ncol(cts.matrix.d1.LOOPED) ) )
# table
loop.table$CPM_threshold           <- c(var, var, var)
loop.table$Day                     <- c('all', 0, 1)
loop.table$total_genes             <- c(All_total_genes,
d0_total_genes,
d1_total_genes)
loop.table$mean_reads_per_gene   <- c(All_mean_reads_per_gene,
d0_mean_reads_per_gene,
d1_mean_reads_per_gene)
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
#print(df_total) # print to monitor progress
}
df_total
All_filterfig <- df_total %>%
dplyr::filter(Day %in% 'all') %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
ggtitle("All data") +
geom_vline(xintercept = c(3,5,10), color = 'red') +
facet_wrap(. ~ variable, scales="free")
# All_filterfig
D0_filterfig <- df_total %>%
dplyr::filter(Day %in% 0) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
ggtitle("Day 0") +
geom_vline(xintercept = c(3,5,10), color = 'red') +
facet_wrap(. ~ variable, scales="free")
# D0_filterfig
D1_filterfig <- df_total %>%
dplyr::filter(Day %in% 1) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot18 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
ggtitle("Day 1") +
geom_vline(xintercept = c(3,5,10), color = 'red') +
facet_wrap(. ~ variable, scales="free")
# D1_filterfig
png("C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis/Output/CPM_Read_Filter_Curve.png", 2000, 1000, pointsize=20)
plot_grid(All_filterfig, D0_filterfig, D1_filterfig)
dev.off()
# ==========================================================
#
# DAY 0  (5 CPM in 50% samples using edgeR)
# ==========================================================
raw.cts.d0          <- data.frame(raw_counts_mtx_D0[,-1], row.names=raw_counts_mtx_D0[,1])
raw.countMatrix.d0  <- as.matrix(raw.cts.d0, row.names="transcript_id")
ncol(raw.countMatrix.d0) # 12  samples from just Day 0
nrow(raw.countMatrix.d0) # 38977 total genes
# pre-filtering; genes omitted if < 5 counts per million reads in 50% of samples
# view the colSums of our Day0 samples  - notice the read sums are around 1 million
CPM.d0 <- cpm(raw.countMatrix.d0) # Obtain CPMs (counts oer million) using egdeR
head(CPM.d0) # Have a look at the output
thresh.d0 <- CPM.d0 > 5 # Which values in myCPM are greater than 5?
head(thresh.d0) # This produces a logical matrix with TRUEs and FALSES
rowSums(head(thresh.d0)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d0)) # 9017 genes with TRUE in 12 samples; 21991 genes with false in 12 samples
#     0     1     2     3     4     5     6     7     8     9    10    11    12
# 21991  1239   818   696   580   557   742   550   524   639   682   942  9017
keep.d0 <- rowSums(thresh.d0) >= floor(ncol(thresh.d0)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
summary(keep.d0) # only 8% of genes passed
#    Mode   FALSE    TRUE
# logical   25881   13096
countMatrix.d0.filtered <- raw.countMatrix.d0[keep.d0,] # Subset the rows (genes)
dim(countMatrix.d0.filtered) # 13096  genes
# ==========================================================
#
# DAY 1  (5 CPM in 51% samples using edgeR)
# ==========================================================
raw.cts.d1          <- data.frame(raw_counts_mtx_D1[,-1], row.names=raw_counts_mtx_D1[,1])
raw.countMatrix.d1  <- as.matrix(raw.cts.d1, row.names="transcript_id")
ncol(raw.countMatrix.d1) # 12  samples from just Day 1
nrow(raw.countMatrix.d1) # 38977 total genes
# pre-filtering; genes omitted if < 5 counts per million reads in 51% of samples
# view the colSums of our Day1 samples  - notice the read sums are around 1 million
CPM.d1 <- cpm(raw.countMatrix.d1) # Obtain CPMs (counts oer million) using egdeR
head(CPM.d1) # Have a look at the output
thresh.d1 <- CPM.d1 > 5 # Which values in myCPM are greater than 5?
head(thresh.d1) # This produces a logical matrix with TRUEs and FALSES
rowSums(head(thresh.d1)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d1)) # 9017 genes with TRUE in 12 samples; 21991 genes with false in 12 samples
#     0     1     2     3     4     5     6     7     8     9    10    11    12
# 23016  1210   732   548   468   447   566   453   411   470   598   867  9191
keep.d1 <- rowSums(thresh.d1) >= floor(ncol(thresh.d1)/2) # we would like to keep genes that have at least 51% TRUES in each row of thresh
summary(keep.d1) # only 8% of genes passed
#    Mode   FALSE    TRUE
# logical   25881   13196
countMatrix.d1.filtered <- raw.countMatrix.d1[keep.d1,] # Subset the rows (genes)
dim(countMatrix.d1.filtered) # 13096  genes
# ==========================================================
#
# DAY 0  (5 CPM in 50% samples using edgeR)
# ==========================================================
raw.cts.all          <- data.frame(raw_counts_mtx_all[,-1], row.names=raw_counts_mtx_all[,1])
# ==========================================================
#
# DAY 0  (5 CPM in 50% samples using edgeR)
# ==========================================================
raw.cts.all          <- data.frame(raw_counts_mtx[,-1], row.names=raw_counts_mtx[,1])
raw.countMatrix.all  <- as.matrix(raw.cts.all, row.names="transcript_id")
ncol(raw.countMatrix.all) # 12  samples from just Day 0
ncol(raw.countMatrix.all) # 24  samples from just Day 0
nrow(raw.countMatrix.all) # 38977 total genes
# pre-filtering; genes omitted if < 5 counts per million reads in 50% of samples
# view the colSums of our Day0 samples  - notice the read sums are around 1 million
CPM.all <- cpm(raw.countMatrix.all) # Obtain CPMs (counts oer million) using egdeR
head(CPM.all) # Have a look at the output
thresh.all <- CPM.all > 5 # Which values in myCPM are greater than 5?
head(thresh.all) # This produces a logical matrix with TRUEs and FALSES
rowSums(head(thresh.all)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.all)) # 9017 genes with TRUE in 12 samples; 21991 genes with false in 12 samples
#     0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16
# 21308  1152   683   551   451   368   366   333   282   319   242   283   303   277   235   258   271
#    17    18    19    20    21    22    23    24
# 324   376   337   351   429   561   775  8142
keep.all <- rowSums(thresh.all) >= floor(ncol(thresh.all)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
summary(keep.all) # only 8% of genes passed
#    Mode   FALSE    TRUE
# logical   25881   13096
countMatrix.all.filtered <- raw.countMatrix.all[keep.all,] # Subset the rows (genes)
dim(countMatrix.all.filtered) # 13096  genes
# write csv
write.csv(countMatrix.all.filtered,"C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis/Output/Read_filter/All.filtered_5cpm50perc.csv") # 'path' called in previous # write .csv section
write.csv(countMatrix.d0.filtered,"C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis/Output/Filtering_reads/D0.filtered_5cpm50perc.csv") # 'path' called in previous # write .csv section
write.csv(countMatrix.d1.filtered,"C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis/Output/Filtering_reads/D1.filtered_5cpm50perc.csv") # 'path' called in previous # write .csv section
# write csv
write.csv(countMatrix.all.filtered,"C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis/Output/Filtering_reads/All.filtered_5cpm50perc.csv") # 'path' called in previous # write .csv section
# LOAD PACKAGES
library(WGCNA) # note: this was previously installed with the command `BiocManager::install("WGCNA")`
library(dplyr)
library(zoo)
library(DESeq2)
library(ComplexHeatmap)
library(circlize)
library(reshape)
library(ggplot2)
library(hrbrthemes)
# SET WORKING DIRECTORY
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis") # sets the working
# read txt file gene count matrix
Raw_abund  <- read.csv(file="Output/Filtered_reads/All.filtered_5cpm50perc.csv", sep=',', header=TRUE)
# LOAD PACKAGES
library(WGCNA) # note: this was previously installed with the command `BiocManager::install("WGCNA")`
library(dplyr)
library(zoo)
library(DESeq2)
library(ComplexHeatmap)
library(circlize)
library(reshape)
library(ggplot2)
library(hrbrthemes)
# SET WORKING DIRECTORY
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis") # sets the working
# read txt file gene count matrix
Raw_abund  <- read.csv(file="Output/Filtered_reads/All.filtered_5cpm50perc.csv", sep=',', header=TRUE)
# LOAD PACKAGES
library(WGCNA) # note: this was previously installed with the command `BiocManager::install("WGCNA")`
library(dplyr)
library(zoo)
library(DESeq2)
library(ComplexHeatmap)
library(circlize)
library(reshape)
library(ggplot2)
library(hrbrthemes)
# SET WORKING DIRECTORY
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis") # sets the working
# LOAD PACKAGES
library(WGCNA) # note: this was previously installed with the command `BiocManager::install("WGCNA")`
library(dplyr)
library(zoo)
library(DESeq2)
library(ComplexHeatmap)
library(circlize)
library(reshape)
library(ggplot2)
library(hrbrthemes)
# SET WORKING DIRECTORY
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis") # sets the working
# read txt file gene count matrix
Raw_abund  <- read.csv(file="Output/Filtered_reads/All.filtered_5cpm50perc.csv", sep=',', header=TRUE)
# LOAD PACKAGES
library(WGCNA) # note: this was previously installed with the command `BiocManager::install("WGCNA")`
library(dplyr)
library(zoo)
library(DESeq2)
library(ComplexHeatmap)
library(circlize)
library(reshape)
library(ggplot2)
library(hrbrthemes)
# SET WORKING DIRECTORY
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Cvirginica_KM_paper/RAnalysis") # sets the working
# read txt file gene count matrix
Raw_abund  <- read.csv(file="Output/Filtered_reads/All.filtered_5cpm50perc.csv", sep=',', header=TRUE)
# read txt file gene count matrix
Raw_abund  <- read.csv(file="Output/Filtering_reads/All.filtered_5cpm50perc.csv", sep=',', header=TRUE)
dim(Raw_abund) # 38977    25 - 25 columns and 38977 total genes
# The following setting is important, do not omit. (as recommended by WGCNA authors - view tutorial)
options(stringsAsFactors = FALSE)
# read txt file gene count matrix
Filt_abund  <- read.csv(file="Output/Filtering_reads/All.filtered_5cpm50perc.csv", sep=',', header=TRUE)
# read txt file gene count matrix
Filt_abund  <- read.csv(file="Output/Filtering_reads/All.filtered_5cpm50perc.csv", sep=',', header=TRUE)
dim(Filt_abund) # 12639    25 - 25 columns and 38977 total genes
# read txt file gene count matrix
Filt_abund  <- read.csv(file="Output/Filtering_reads/All.filtered_5cpm50perc.csv", sep=',', header=TRUE)
dim(Filt_abund) # 12639    25 - 25 columns and 38977 total genes
# The following setting is important, do not omit. (as recommended by WGCNA authors - view tutorial)
options(stringsAsFactors = FALSE)
